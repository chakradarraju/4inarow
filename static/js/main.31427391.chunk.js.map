{"version":3,"sources":["Cell.js","Board.js","counter.js","Game.js","Start.js","App.js","serviceWorker.js","index.js"],"names":["Cell","params","gatedAttributes","enable","onMouseEnter","onHover","onClick","className","type","Board","hoverHandler","j","clickHandler","cells","map","r","i","key","c","Counter","this","reset","n","cc","checkEnd","N_ROWS","length","N_COLS","counter","ne","count","currentColor","d","Game","INIT_VALUES","Array","e","fill","useState","setCells","player1","currentPlayer","setCurrentPlayer","playerColor","currentPlayerColor","setCurrentPlayerColor","gameOver","setGameOver","removeHoverIndicator","hoverColor","lowestEmptyCell","player","player2","onExit","style","margin","slice","console","log","result","alert","nextPlayer","Start","setPlayer1","prompt","setPlayer2","onStart","App","started","setStarted","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.31427391.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\nfunction Cell(params) {\n  const gatedAttributes = params.enable ? {\n    onMouseEnter: params.onHover,\n    onClick: params.onClick\n  } : {};\n  return <div {...gatedAttributes} className={'cell ' + params.type}></div>;\n}\n\nexport default Cell;","import React, {useState} from 'react';\nimport Cell from './Cell';\n\nfunction Board(params) {\n  const hoverHandler = (j) => () => params.onHover(j)\n  const clickHandler = (j) => () => params.onClick(j);\n\n  return params.cells.map((r, i) => <div key={i}>\n    {r.map((c, j) => <Cell \n      type={c}\n      key={j}\n      enable={params.enable}\n      onClick={clickHandler(j)}\n      onHover={hoverHandler(j)} />)}\n  </div>);\n}\n\nexport default Board;","\nclass Counter {\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.n = 0;\n    this.c = '';\n  }\n\n  count(cc) {\n    if (this.c === cc) {\n      this.n++;\n      if (this.n === 4) return true;\n    } else {\n      this.c = cc;\n      this.n = 1;\n    }\n    return false;\n  }\n\n  currentColor() {\n    return this.c;\n  }\n}\n\nfunction checkEnd(cells) {\n  const N_ROWS = cells.length;\n  const N_COLS = cells[0].length;\n  const counter = new Counter();\n  var ne = 0;\n  for (var i = 0; i < N_ROWS; i++) {\n    counter.reset();\n    for (var j = 0; j < N_COLS; j++) {\n      if (cells[i][j] === 'e') {\n        ne++;\n        counter.reset();\n      } else {\n        if (counter.count(cells[i][j])) {\n          return counter.currentColor();\n        }          \n      }\n    }\n  }\n  if (ne === 0) return 'tie';\n  for (var j = 0; j < N_COLS; j++) {\n    counter.reset();\n    for (var i = 0; i < N_ROWS; i++) {\n      if (cells[i][j] !== 'e') {\n        if (counter.count(cells[i][j])) {\n          return counter.currentColor();\n        }\n      } else counter.reset();\n    }\n  }\n  for (var d = 0; d < N_ROWS + N_COLS; d++) {\n    counter.reset();\n    for (var i = 0; i < N_ROWS; i++) {\n      const j = d - i;\n      if (j < 0 || j >= N_COLS) continue;\n      if (cells[i][j] !== 'e') {\n        if (counter.count(cells[i][j])) {\n          return counter.currentColor();\n        }\n      } else counter.reset();\n    }\n  }\n  for (var d = -N_ROWS; d < N_COLS; d++) {\n    counter.reset();\n    for (var i = 0; i < N_ROWS; i++) {\n      const j = d + i;\n      if (j < 0 || j >= N_COLS) continue;\n      if (cells[i][j] !== 'e') {\n        if (counter.count(cells[i][j])) {\n          return counter.currentColor();\n        }\n      } else counter.reset();\n    }\n  }\n  return null;\n}\n\n\nexport default checkEnd;","import React, {useState} from 'react';\nimport Board from './Board';\nimport './Game.css';\nimport Cell from './Cell';\nimport checkEnd from './counter';\n\nfunction Game(params) {\n  const N_ROWS = 7;\n  const N_COLS = 7;\n  const INIT_VALUES = [...Array(N_ROWS)].map(e => new Array(N_COLS).fill('e'));\n  const [cells, setCells] = useState(INIT_VALUES);  \n  const [currentPlayer, setCurrentPlayer] = useState(params.player1);\n  const [currentPlayerColor, setCurrentPlayerColor] = useState(playerColor(params.player1));\n  const [gameOver, setGameOver] = useState(false);\n  function removeHoverIndicator() {\n    const hoverColor = currentPlayerColor + 'l';\n    for (var i = 0; i < N_ROWS; i++) for (var j = 0; j < N_COLS; j++)\n      if (cells[i][j] === hoverColor)\n        cells[i][j] = 'e';\n  }\n  function onHover(j) {\n    removeHoverIndicator();\n    const i = lowestEmptyCell(j);\n    if (i < 0) return;\n    cells[i][j] = currentPlayerColor + 'l';\n    setCells(cells.slice());\n  }\n\n  function lowestEmptyCell(j) {\n    var i = N_ROWS - 1;\n    while (cells[i][j] !== 'e' && i > 0) i--;\n    return i;\n  }\n\n  function onClick(j) {\n    removeHoverIndicator();\n    const i = lowestEmptyCell(j);\n    if (i < 0) {\n      console.log('Column does not have empty cell');\n      return;\n    }\n    cells[i][j] = currentPlayerColor;\n    setCells(cells.slice());\n    var result = checkEnd(cells);\n    if (result !== null) {\n      if (result !== 'tie') result = playerName(result) + ' won';\n      alert(result);\n      setGameOver(true);\n    }\n    const nextPlayer = otherPlayer(currentPlayer);\n    setCurrentPlayer(nextPlayer);\n    setCurrentPlayerColor(playerColor(nextPlayer));\n  }\n\n  function otherPlayer(player) {\n    return player === params.player1 ? params.player2 : params.player1;\n  }\n\n  function playerColor(player) {\n    return player === params.player1 ? 'b' : 'r';\n  }\n\n  function playerName(color) {\n    return color === 'b' ? params.player1 : params.player2;\n  }\n\n  return (<>\n    <div className=\"users\">\n      <span className=\"you\"><Cell type='b'/>{params.player1}</span>\n      <span className=\"opponent\">{params.player2}<Cell type='r'/></span>\n    </div>\n    <div className=\"message\">{currentPlayer} turn</div>\n    <button onClick={params.onExit}>Exit</button>\n    <div style={{margin: '30px'}}>\n      <Board enable={!gameOver} cells={cells} onHover={onHover} onClick={onClick} />\n    </div>\n  </>);\n}\n\nexport default Game;","import React, { useState } from 'react';\n\nfunction Start(params) {\n  return (<div style={{margin: '60px'}}>\n    Update your names and hit start to play!<br/><br/>\n    Player 1: {params.player1}<button onClick={() => params.setPlayer1(prompt(\"Player 1 name\"))}>Change</button><br/>\n    Player 2: {params.player2}<button onClick={() => params.setPlayer2(prompt(\"Player 2 name\"))}>Change</button><br/>\n    <button style={{margin: '30px'}} onClick={params.onStart}>Start</button>\n  </div>);\n}\n\nexport default Start;","import React, {useState} from 'react';\nimport './App.css';\nimport Game from './Game';\nimport Start from './Start';\n\nfunction App() {\n  const [started, setStarted] = useState(false);\n  const [player1, setPlayer1] = useState('Player 1');\n  const [player2, setPlayer2] = useState('Player 2');\n\n  return (<div className=\"App\">\n    <div className=\"title\">4 IN A ROW</div>\n    <div>\n      {!started && <Start player1={player1} player2={player2} setPlayer1={setPlayer1} setPlayer2={setPlayer2} onStart={() => setStarted(true)} />}\n      {started && <Game player1={player1} player2={player2} onExit={() => setStarted(false)} />}\n    </div>\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}