{"version":3,"sources":["../node_modules/peerjs/dist sync","Cell.js","Board.js","common.js","counter.js","actions.js","Game.js","Start.js","Messenger.js","GameManager.js","SyncAgent.js","ChatWindow.js","App.js","serviceWorker.js","reducers.js","store.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Cell","params","gatedAttributes","enable","onMouseEnter","onHover","onClick","className","type","Board","hoverHandler","j","clickHandler","cells","map","r","i","key","c","playerColor","player1","peerConnectionString","gameId","temp","URL","window","location","hash","myClientId","toString","otherPlayer","hostId","player1Name","player2Name","myReference","otherPlayerReference","player1Reference","player1Local","networkGame","player2Reference","player1Color","Counter","this","reset","result","count","prevColor","setWinner","color","inc","updateColor","checkEnd","N_ROWS","length","N_COLS","counter","rows","cols","boardFull","put","d","shortid","require","onExit","highlight","sendMessage","msg","data","generate","sentMessage","message","receiveMessage","ackMessage","addPiece","togglePlayer","setHostId","setGameId","setPeerGameId","peerGameId","setNetworkGame","isNetworkGame","updateClientId","clientId","resetServerConnection","successfulServerConnection","resetPeerConnection","successfulPeerConnection","setPlayer1Name","name","setPlayer2Name","startGame","exitGame","setupNewGame","doneSetupGame","setCells","setPlayer1Turn","player1Turn","markDuplicateClient","connect","a","actions","select","gameResult","useEffect","inMessages","ack","alert","serverConnected","peerConnected","noun","confirm","style","margin","gameStrElement","useRef","useState","youStarted","setYouStarted","peerStarted","setPeerStarted","processMessage","console","log","copyGameStr","current","document","execCommand","padding","prompt","duplicateClient","ref","readOnly","value","opts","secure","protocol","serverConnection","setServerConnection","serverConnectionError","setServerConnectionError","peerConnection","setPeerConnection","peerConnectionError","setPeerConnectionError","isClient","setIsClient","tryPeerConnect","metadata","peerId","reliable","existingId","localStorage","getItem","setItem","Peer","disconnected","setTimeout","destroyed","error","reconnect","indexOf","on","err","connection","off","outMessages","sent","send","gameHash","setGameHash","url","substr","split","settingUpNewGame","gameStarted","messages","setMessages","messageDraft","setMessageDraft","processInMessage","from","onKeyDown","keyCode","onChange","target","m","title","src","Boolean","hostname","match","getInitCells","Array","fill","INIT_CELLS","state","action","lowestEmptyCell","removeHoverIndicator","hoverColor","slice","markMessage","field","ret","updateIfMatches","store","createStore","combineReducers","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7bc0810d.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 44;","import React from 'react';\nimport './Cell.css';\n\nfunction Cell(params) {\n  const gatedAttributes = params.enable ? {\n    onMouseEnter: params.onHover,\n    onClick: params.onClick\n  } : {};\n  return <div {...gatedAttributes} className={'cell ' + params.type}></div>;\n}\n\nexport default Cell;","import React, {useState} from 'react';\nimport Cell from './Cell';\n\nfunction Board(params) {\n  const hoverHandler = (j) => () => params.onHover(j)\n  const clickHandler = (j) => () => params.onClick(j);\n\n  return params.cells.map((r, i) => <div key={i}>\n    {r.map((c, j) => <Cell \n      type={c}\n      key={j}\n      enable={params.enable}\n      onClick={clickHandler(j)}\n      onHover={hoverHandler(j)} />)}\n  </div>);\n}\n\nexport default Board;","export function playerColor(player1) {\n  return player1 ? 'b' : 'c';\n};\n  \nexport function peerConnectionString(params, gameId) {\n  const temp = new URL(window.location);\n  if (!gameId) gameId = params.gameId;\n  temp.hash = params.myClientId + '/' + gameId;\n  return temp.toString();\n}\n\nexport function otherPlayer(params) {\n  return !params.hostId ? params.player2Name : params.player1Name;\n}\n\nexport function myReference(params) {\n  const player1Local = !params.hostId;\n  return player1Local ? params.player1Name : params.player2Name;  \n}\n\nexport function otherPlayerReference(params) {\n  const player1Local = !params.hostId;\n  return player1Local ? params.player2Name : params.player1Name;\n}\n\nexport function player1Reference(params) {\n  const player1Local = !params.hostId;\n  return params.networkGame && player1Local ? 'You' : params.player1Name;\n}\n\nexport function player2Reference(params) {\n  const player1Local = !params.hostId;\n  return params.networkGame && !player1Local ? 'You' : params.player2Name;\n}\n\nexport function possessiveForm(noun) {\n  return noun === 'You' ? 'Your' : (noun + \"'s\")\n}\n","import {playerColor} from './common';\nexport const NO_RESULT = 0;\nexport const TIE = 1;\nexport const PLAYER1_WON = 2;\nexport const PLAYER2_WON = 3;\n\nconst player1Color = playerColor(true);\nconst emptyColor = 'a';\n\nclass Counter {\n  constructor() {\n    this.reset();\n    this.result = NO_RESULT;\n  }\n\n  reset() {\n    this.count = 0;\n    this.prevColor = emptyColor;\n  }\n\n  inc() {\n    this.count++;\n    if (this.count === 4) this.setWinner();\n  }\n\n  setWinner() {\n    this.result = this.prevColor === player1Color ? PLAYER1_WON : PLAYER2_WON;\n  }\n\n  updateColor(color) {\n    this.prevColor = color;\n    this.count = 1;\n  }\n\n  put(color) {\n    if (color === emptyColor) this.reset();\n    else if (color === this.prevColor) this.inc();\n    else this.updateColor(color);\n    return this.result;\n  }\n}\n\nfunction boardFull(cells, rows, cols) {\n  for (var i = 0; i < rows; i++) for (var j = 0; j < cols; j++) if (cells[i][j] === emptyColor) return false;\n  return true;\n}\n\nfunction checkEnd(cells) {\n  const N_ROWS = cells.length;\n  const N_COLS = cells[0].length;\n  const counter = new Counter();\n  if (boardFull(cells, N_ROWS, N_COLS)) return TIE;\n  for (var i = 0; i < N_ROWS; i++) {\n    counter.reset();\n    for (var j = 0; j < N_COLS; j++)\n      if (counter.put(cells[i][j]) !== NO_RESULT) return counter.result;\n  }\n  for (var j = 0; j < N_COLS; j++) {\n    counter.reset();\n    for (var i = 0; i < N_ROWS; i++)\n      if (counter.put(cells[i][j]) !== NO_RESULT) return counter.result;\n  }\n  for (var d = 0; d < N_ROWS + N_COLS; d++) {\n    counter.reset();\n    for (var i = 0; i < N_ROWS; i++) {\n      const j = d - i;\n      if (j < 0 || j >= N_COLS) continue;\n      if (counter.put(cells[i][j]) !== NO_RESULT) return counter.result;\n    }\n  }\n  for (var d = -N_ROWS; d < N_COLS; d++) {\n    counter.reset();\n    for (var i = 0; i < N_ROWS; i++) {\n      const j = d + i;\n      if (j < 0 || j >= N_COLS) continue;\n      if (counter.put(cells[i][j]) !== NO_RESULT) return counter.result;\n    }\n  }\n  return NO_RESULT;\n}\n\n\nexport default checkEnd;","const shortid = require('shortid');\n\nexport const onExit = () => ({type: 'EXIT_GAME'});\n\nexport const highlight = (j, color) => ({type: 'HIGHLIGHT', j, color});\n\nexport const sendMessage = (msg, data) => ({type: 'SEND_MESSAGE', msg, data, id: shortid.generate()});\n\nexport const sentMessage = message => ({type: 'SENT_MESSAGE', id: message.id});\n\nexport const receiveMessage = (msg, data) => ({type: 'RECEIVED_MESSAGE', msg, data, id: shortid.generate()})\n\nexport const ackMessage = message => ({type: 'ACK_MESSAGE', id: message.id});\n\nexport const addPiece = (j, color) => ({type: 'ADD_PIECE', j, color});\n\nexport const checkEnd = cells => ({type: 'CHECK_END', cells});\n\nexport const togglePlayer = () => ({type: 'TOGGLE_PLAYER'});\n\nexport const setHostId = hostId => ({type: 'SET_HOST', hostId});\n\nexport const setGameId = gameId => ({type: 'SET_GAME_ID', gameId});\n\nexport const setPeerGameId = peerGameId => ({type: 'SET_PEER_GAME_ID', peerGameId});\n\nexport const setNetworkGame = isNetworkGame => ({type: 'SET_NETWORK_GAME', isNetworkGame});\n\nexport const updateClientId = clientId => ({type: 'UPDATE_CLIENT_ID', clientId});\n\nexport const resetServerConnection = () => ({type: 'RESET_SERVER_CONNECTION'});\n\nexport const successfulServerConnection = () => ({type: 'SUCCESSFUL_SERVER_CONNECTION'});\n\nexport const resetPeerConnection = () => ({type: 'RESET_PEER_CONNECTION'});\n\nexport const successfulPeerConnection = () => ({type: 'SUCCESSFUL_PEER_CONNECTION'});\n\nexport const setPlayer1Name = name => ({type: 'SET_PLAYER1_NAME', name});\n\nexport const setPlayer2Name = name => ({type: 'SET_PLAYER2_NAME', name});\n\nexport const startGame = () => ({type: 'GAME_STARTED'});\n\nexport const exitGame = () => ({type: 'SHOW_START_SCREEN'});\n\nexport const setupNewGame = () => ({type: 'SETUP_NEW_GAME'});\n\nexport const doneSetupGame = () => ({type: 'DONE_SETUP_GAME'});\n\nexport const setCells = cells => ({type: 'SET_CELLS', cells});\n\nexport const setPlayer1Turn = player1Turn => ({type: 'SET_PLAYER1_TURN', player1Turn});\n\nexport const markDuplicateClient = () => ({type: 'MARK_DUPLICATE_CLIENT'});","import React, { useEffect } from 'react';\nimport Board from './Board';\nimport './Game.css';\nimport Cell from './Cell';\nimport { NO_RESULT, TIE, PLAYER1_WON, PLAYER2_WON } from './counter';\nimport {connect} from 'react-redux';\nimport {playerColor, otherPlayer, player1Reference, player2Reference, possessiveForm} from './common';\nimport * as actions from './actions';\n\nfunction Game(params) {\n  const player1Local = !params.hostId;\n\n  useEffect(() => {\n    for (var message of params.inMessages) if (!message.ack) {\n      if (message.msg === 'select') {\n        select(message.data);\n      } else if (message.msg === 'quit-game') {\n        alert(otherPlayer(params) + ' has quit game');\n        params.setupNewGame();\n      }\n      params.ackMessage(message);\n    }\n  }, [params.inMessages]);\n\n  function onHover(j) {\n    params.highlight(j, playerColor(params.player1Turn))\n  }\n\n  function onClick(j) {\n    if (params.networkGame) params.sendMessage('select', j);\n    select(j);\n  }\n\n  function select(j) {\n    params.addPiece(j, playerColor(params.player1Turn));\n    params.checkEnd(params.cells);\n    if (params.gameResult === 0) params.togglePlayer();\n  }\n\n  function shouldEnableBoard() {\n    if (params.gameResult === NO_RESULT) {  // Game going on.\n      if (params.networkGame) {  // Make sure peer is connected, and it is your turn.\n        return params.peerConnected && (player1Local === params.player1Turn);\n      } else {  // Local game, no need to disable board.\n        return true;\n      }\n    } else {  // Game over, disable board.\n      return false;\n    }\n  }\n\n  function message() {\n    if (params.gameResult === TIE) return 'Tie';\n    if (params.gameResult === PLAYER1_WON) return player1Reference() + ' won';\n    if (params.gameResult === PLAYER2_WON) return player2Reference() + ' won';\n    if (params.networkGame) {\n      if (!params.serverConnected) return \"You're not connected to server, check internet\";\n      if (!params.peerConnected) return otherPlayer(params) + ' disconnected';\n      if (params.peerConnected && params.peerGameId !== params.gameId) return otherPlayer(params) + ' left the game';\n    }\n    return possessiveForm(params.player1Turn ? player1Reference() : player2Reference()) + ' turn';\n  }\n\n  function onExit() {\n    if (window.confirm('Are you sure you want to exit game?')) {\n      if (params.networkGame) params.sendMessage('quit-game');\n      params.setupNewGame();\n    }\n  }\n\n  function setupNew() {\n    if (window.confirm('Start new game?')) params.setupNewGame();\n  }\n\n  return (<>\n    <div className=\"users\">\n      <span className=\"you\"><Cell type={playerColor(true)} />{player1Reference()}</span>\n      <span className=\"opponent\">{player2Reference()}<Cell type={playerColor(false)} /></span>\n    </div>\n    <div className=\"message\">{message()}</div>\n    {(params.gameResult === NO_RESULT || !player1Local) && <button onClick={onExit}>Exit</button>}\n    {params.gameResult !== NO_RESULT && player1Local && <button onClick={setupNew}>Start new</button>}\n    <div style={{margin: '30px'}}>\n      <Board enable={shouldEnableBoard()} cells={params.cells} onHover={onHover} onClick={onClick} />\n    </div>\n  </>);\n}\n\nexport default connect(a => a, actions)(Game);","import React, { useState, useEffect, useRef } from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from './actions';\nimport {peerConnectionString} from './common';\n\nfunction Start(params) {\n  const gameStrElement = useRef();\n  const [youStarted, setYouStarted] = useState(false);\n  const [peerStarted, setPeerStarted] = useState(false);\n\n  function processMessage(message) {\n    if (message.ack) return;\n    if (message.msg === 'peer-started') {\n      console.log('Got peer started');\n      setPeerStarted(true);\n    } else if (message.msg === 'ask-peer-started') {\n      console.log('Got peer started ask');\n      if (youStarted) params.sendMessage('peer-started', true);\n    } else {\n      return;\n    }\n    params.ackMessage(message);\n  }\n\n  useEffect(() => {\n    if (!params.inMessages) return;\n    for (var i = 0; i < params.inMessages.length; i++) processMessage(params.inMessages[i]);\n  }, [params.inMessages, params.hostId]);\n\n  useEffect(() => {\n    if (params.peerConnected) {\n      params.setNetworkGame(true);\n      if (params.hostId) params.sendMessage('ask-player1-name', {});\n      else params.sendMessage('ask-player2-name', {});\n    }\n  }, [params.peerConnected]);\n\n  useEffect(() => {\n    if (params.networkGame && !params.hostId) params.sendMessage('player1-name', params.player1Name);\n  }, [params.player1Name]);\n\n  useEffect(() => {\n    if (params.networkGame && params.hostId) params.sendMessage('player2-name', params.player2Name);\n  }, [params.player2Name]);\n\n  function copyGameStr() {\n    if (!gameStrElement || !gameStrElement.current) return;\n    gameStrElement.current.select();\n    document.execCommand('copy');\n    alert('Copied, now send it to your friend');\n  }\n\n  useEffect(() => {\n    if (youStarted) params.sendMessage('peer-started', {});\n  }, [youStarted]);\n\n  useEffect(() => {\n    if (!youStarted) return;\n    if (peerStarted) params.startGame();\n    else params.sendMessage('ask-peer-started', {});\n  }, [youStarted, peerStarted]);\n\n  function hostUI() {\n    return <>\n      <div style={{margin: '20px'}}>\n        <div>Name: {params.player1Name}<button onClick={() => params.setPlayer1Name(prompt(\"Your name\"))}>Change</button></div>\n        <div>Opponent name: {params.player2Name}</div>\n      </div>\n      {!params.peerConnected && <>\n        Ask your friend to open:<br/>\n        <input ref={gameStrElement} readOnly value={peerConnectionString(params)} /><button onClick={copyGameStr}>Copy</button>\n        <div>Waiting for peer...</div>\n      </>}\n    </>\n  }\n\n  function peerUI() {\n    return <>\n      <div style={{margin: '20px'}}>\n        <div>Name: {params.player2Name}<button onClick={() => params.setPlayer2Name(prompt(\"Your name\"))}>Change</button></div>\n        <div>Opponent name: {params.player1Name}</div>\n      </div>\n      {!params.peerConnected && <>Connecting to host...</>}\n    </>\n  }\n\n  function networkGameUI() {\n    if (params.duplicateClient) return <>You've already connected from another tab, maybe close other tabs of 4-in-a-row page?</>;\n    if (!params.serverConnected) return <>Connecting to server...</>;\n    return <>\n      {!params.hostId && hostUI()}\n      {params.hostId && peerUI()}\n      {params.peerConnected && youStarted && <div>Waiting for peer to start...</div>}\n      {params.peerConnected && !youStarted && <button onClick={() => setYouStarted(true)}>Start</button>}\n    </>\n  }\n\n  function localGameUI() {\n    return <>\n      Update your names and hit start to play!<br/><br/>\n      Player 1: {params.player1Name}<button onClick={() => params.setPlayer1Name(prompt(\"Player 1 name\"))}>Change</button><br/>\n      Player 2: {params.player2Name}<button onClick={() => params.setPlayer2Name(prompt(\"Player 2 name\"))}>Change</button><br/>\n      <button style={{margin: '30px'}} onClick={params.startGame}>Start</button>\n    </>\n  }\n\n  return (<div style={{margin: '30px'}}>\n    <div style={{margin: '30px'}}>\n      <button style={{padding: params.networkGame ? '' : '5px'}} onClick={() => params.setNetworkGame(false)}>Local game</button>\n      <button style={{padding: params.networkGame ? '5px' : ''}} onClick={() => params.setNetworkGame(true)}>Network game</button>\n    </div>\n    {!params.networkGame && localGameUI()}\n    {params.networkGame && networkGameUI()}\n  </div>);\n}\n\nexport default connect(a => a, actions)(Start);","import Peer from 'peerjs';\nimport {connect} from 'react-redux';\nimport {useEffect, useState} from 'react';\nimport * as actions from './actions';\nconst shortid = require('shortid');\n\nconst opts = { secure: window.location.protocol === 'https:' };\n\nfunction Messenger(params) {\n\n  const [serverConnection, setServerConnection] = useState(null);\n  const [serverConnectionError, setServerConnectionError] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(null);\n  const [peerConnectionError, setPeerConnectionError] = useState(null);\n  const [isClient, setIsClient] = useState(true);\n\n  useEffect(() => {\n    const existingId = localStorage.getItem('client-id');\n    const id = existingId ? existingId : shortid.generate();\n    if (id !== existingId) localStorage.setItem('client-id', id);\n    params.updateClientId(id);\n  }, []);\n  \n  useEffect(() => {\n    if (params.myClientId) {\n      if (serverConnection && params.myClientId === serverConnection.id) {\n        console.log('Id did not change', params.myClientId, serverConnection.id);\n        return;\n      }\n      console.log('Connecting to server with', params.myClientId);\n      setServerConnection(new Peer(params.myClientId, opts));\n    }\n  }, [params.myClientId]);\n\n  function onServerDisconnected() {\n    setTimeout(() => {\n      if (serverConnection && serverConnection.destroyed) {\n        console.error('Why is server connection destroyed?');\n        return;\n      }\n      if (serverConnection && serverConnection.disconnected) {\n        console.log('Trying to reconnect to server...');\n        serverConnection.reconnect();\n      }\n    }, 1000);\n  }\n\n  useEffect(() => {\n    if (!serverConnection || serverConnection.disconnected) {\n      console.log('Disconnected from server');\n      params.resetServerConnection();\n      onServerDisconnected();\n    }\n    if (serverConnectionError && serverConnectionError.message.indexOf(params.myClientId) !== -1) params.markDuplicateClient();\n    if (serverConnectionError && serverConnectionError.message.indexOf('Could not connect to peer') !== -1) tryPeerConnect();\n  }, [serverConnectionError]);\n\n  useEffect(() => {\n    if (params.serverConnected) setServerConnectionError(null);\n  }, [params.serverConnected]);\n\n  useEffect(() => {\n    if (!serverConnection) {\n      console.log('Skipping event handlers on invalid serverconnection', serverConnection);\n      return;\n    }\n    console.log('Setting up server connection');\n    params.resetServerConnection();\n    serverConnection.on('open', id => {\n      console.log('Successfully connected to server');\n      params.successfulServerConnection();\n    });\n    serverConnection.on('error', err => {\n      console.error('Got server error', err);\n      setServerConnectionError(err);\n    });\n    serverConnection.on('connection', connection => {\n      setPeerConnection(connection);\n    });\n    return () => {\n      serverConnection.off('open');\n      serverConnection.off('error');\n      serverConnection.off('connection');\n    }\n  }, [serverConnection]);\n\n  useEffect(() => {\n    if (!peerConnection) {\n      console.log('no peer connection');\n      return;\n    }\n    peerConnection.on('open', () => {\n      console.log('peer connected');\n      params.successfulPeerConnection();\n    });\n    peerConnection.on('data', msg => {\n      console.log('Received message', msg);\n      params.receiveMessage(msg.msg, msg.data);\n    });\n    peerConnection.on('error', err => {\n      console.error('Peer connection error', err);\n      setPeerConnectionError(err);\n      params.resetPeerConnection();\n    });\n    return () => {\n      peerConnection.off('open');\n      peerConnection.off('data');\n      peerConnection.off('error');\n    }\n  }, [peerConnection]);\n\n  function tryPeerConnect() {\n    if (!params.hostId) {\n      console.log('hostId missing', params.hostId);\n      return;\n    }\n    setPeerConnection(serverConnection.connect(params.hostId, {metadata: {peerId: params.myClientId}, reliable: true}));\n  }\n\n  function onDisconnected() {\n    if (isClient) setTimeout(() => {\n      console.log('Trying to reconnect...', params.hostId);\n      tryPeerConnect();\n    }, 1000);\n  }\n\n  useEffect(() => {\n    if (peerConnectionError && peerConnectionError.message.indexOf('disconnected') !== -1) onDisconnected();\n  }, [peerConnectionError]);\n\n  useEffect(() => {\n    if (params.peerConnected) setPeerConnectionError(null);\n  }, [params.peerConnected]);\n\n  useEffect(() => {\n    if (!serverConnection || !params.serverConnected) {\n      console.log('Not connected to server, skipping connecting to host', params.hostId, serverConnection, params.serverConnected);\n      return;\n    }\n    if (!params.hostId) return;\n    setIsClient(true);\n    tryPeerConnect();\n  }, [serverConnection, params.serverConnected, params.hostId]);\n\n  useEffect(() => {\n    if (!params.peerConnected) {\n      console.log('Unable to send message');\n      return;\n    }\n    for (var message of params.outMessages) {\n      if (!message.sent) {\n        peerConnection.send({msg: message.msg, data: message.data});\n        params.sentMessage(message);\n      }\n    }\n  }, [params.outMessages, params.peerConnected]);\n\n  return null;\n}\n\nexport default connect(a => a, actions)(Messenger);","import { connect } from \"react-redux\";\nimport * as actions from './actions';\nimport React, { useState, useEffect } from \"react\";\nimport {peerConnectionString, otherPlayer} from './common';\nconst shortid = require('shortid');\n\nfunction GameManager(params) {\n  const [gameHash, setGameHash] = useState(null);\n\n  function parseGameId() {\n    if (gameHash.indexOf('/') === -1) return [null, gameHash];\n    return gameHash.split('/');\n  }\n\n  useEffect(() => {\n    setGameHash(window.location.hash.length > 1 ? window.location.hash.substr(1) : shortid.generate());\n  }, []);\n\n  function processMessage(message) {\n    if (message.ack) return;\n    if (message.msg === 'peer-game-id') {\n      params.setPeerGameId(message.data);\n    } else if (message.msg === 'new-game') {\n      if (window.confirm(otherPlayer(params) + ' started a new game, join?')) {\n        const url = new URL(message.data);\n        setGameHash(url.hash.substr(1));\n        params.exitGame();\n      } else {\n        params.setupNewGame();\n      }\n    } else if (message.msg === 'ask-peer-game-id') {\n      params.sendMessage('peer-game-id', params.gameId);\n    } else return;\n    params.ackMessage(message);\n  }\n\n  useEffect(() => {\n    for (var i = 0; i < params.inMessages.length; i++) processMessage(params.inMessages[i]);\n  }, [params.inMessages]);\n\n  useEffect(() => {\n    window.location.hash = gameHash;\n  }, [gameHash]);\n\n  useEffect(() => {\n    if (gameHash && gameHash.length) {\n      const [hostId, gameId] = parseGameId();\n      params.setHostId(hostId);\n      params.setGameId(gameId);  \n      if (params.networkGame) params.sendMessage('peer-game-id', gameId);\n    }\n  }, [gameHash]);\n\n  useEffect(() => {\n    if (params.settingUpNewGame) {\n      console.log('Setting up new game');\n      const gameId = shortid.generate();\n      setGameHash(gameId);\n      if (params.peerConnected) params.sendMessage('new-game', peerConnectionString(params, gameId));\n      params.doneSetupGame();\n      params.exitGame();\n    }\n  }, [params.settingUpNewGame]);\n\n  useEffect(() => {\n    if (params.gameStarted && params.networkGame) params.sendMessage('ask-peer-game-id', true);\n  }, [params.gameStarted]);\n\n  return null;\n}\n\nexport default connect(a => a, actions)(GameManager);","import { connect } from \"react-redux\";\nimport React, { useEffect } from 'react';\nimport * as actions from './actions';\n\n\nfunction SyncAgent(params) {\n\n  function processMessage(message) {\n    if (message.ack) return;\n    if (message.msg === 'ask-player1-name') {\n      params.sendMessage('player1-name', params.player1Name);\n    } else if (message.msg === 'ask-player2-name') {\n      params.sendMessage('player2-name', params.player2Name);\n    } else if (message.msg === 'player1-name') {\n      params.setPlayer1Name(message.data);\n    } else if (message.msg === 'player2-name') {\n      params.setPlayer2Name(message.data);\n    } else if (message.msg === 'ask-game-started') {\n      params.sendMessage('game-started', params.gameStarted);\n    } else if (message.msg === 'game-started') {\n      if (message.data) {\n        params.startGame();\n        params.sendMessage('ask-player1-name');\n        params.sendMessage('ask-player2-name');\n        params.sendMessage('ask-game-cells');\n        params.sendMessage('ask-player1-turn');\n        params.sendMessage('ask-peer-game-id');\n      }\n    } else if (message.msg === 'ask-game-cells') {\n      params.sendMessage('game-cells', params.cells);\n    } else if (message.msg === 'game-cells') {\n      params.setCells(message.data);\n    } else if (message.msg === 'player1-turn') {\n      params.setPlayer1Turn(message.data);\n    } else if (message.msg === 'ask-player1-turn') {\n      params.sendMessage('player1-turn', params.player1Turn);\n    } else return;\n    params.ackMessage(message);\n  }\n\n  useEffect(() => {\n    for (var i = 0; i < params.inMessages.length; i++) processMessage(params.inMessages[i]);\n  }, [params.inMessages]);\n\n  useEffect(() => {\n    if (params.peerConnected) {\n      if (!params.gameStarted) params.sendMessage('ask-game-started', {});\n    }\n  }, [params.peerConnected]);\n\n  return null;\n}\n\nexport default connect(a => a, actions)(SyncAgent);","import { connect } from \"react-redux\";\nimport * as actions from './actions';\nimport React, { useState, useEffect, useRef } from \"react\";\nimport {otherPlayerReference, myReference} from './common';\nimport './ChatWindow.css';\n\nfunction ChatWindow(params) {\n  const [messages, setMessages] = useState([]);\n  const [messageDraft, setMessageDraft] = useState('');\n\n  function processInMessage(message) {\n    if (message.ack) return;\n    if (message.msg === 'text-message') {\n      setMessages([{from: 'other', data: message.data} , ...messages]);\n    } else return;\n    params.ackMessage(message);\n  }\n\n  useEffect(() => {\n    for (var message of params.inMessages) processInMessage(message);\n  }, [params.inMessages, params.outMessages]);\n\n  function onKeyDown(e) {\n    if (e.keyCode === 13) {\n      if (messageDraft.length === 0) {\n        console.log('not sending empty message');\n        return;\n      }\n      params.sendMessage('text-message', messageDraft);\n      setMessages([{from: 'me', data: messageDraft}, ...messages]);\n      setMessageDraft('');\n    }\n  }\n\n  return <div className=\"chat-root\">\n    <div>Chat with {otherPlayerReference(params)}</div>\n    <input value={messageDraft} onKeyDown={onKeyDown} onChange={e => setMessageDraft(e.target.value)} />\n{messages.map((m, i) => <div key={i} className={\"message \" + m.from}>{(m.from === 'me' ? myReference : otherPlayerReference)(params)}: {m.data}</div>)}\n  </div>;\n}\n\nexport default connect(a => a, actions)(ChatWindow);","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Game from './Game';\nimport Start from './Start';\nimport Messenger from './Messenger';\nimport {connect} from 'react-redux';\nimport GameManager from './GameManager';\nimport SyncAgent from './SyncAgent';\nimport ReactJson from 'react-json-view';\nimport ChatWindow from './ChatWindow';\n\nfunction App(params) {\n  return (<div className=\"App\">\n    <Messenger />\n    <GameManager />\n    <SyncAgent />\n    <div className=\"title\">4 IN A ROW<div className=\"howto\" title=\"\n    Game is played by 2 players taking alternate turns,\n    in his turn player chooses a column and a piece of their color is placed in lowest free cell,\n    first player to get 4 pieces of his color in a row (horizontal, vertical or diagonal) wins.\">?</div></div>\n    <div>\n      {!params.gameStarted && <Start />}\n      {params.gameStarted && <Game />}\n    </div>\n    {params.peerConnected && <ChatWindow />}\n    {localStorage.getItem('4inarow_debug') && <ReactJson src={params} />}\n  </div>);\n}\n\nexport default connect(a => a)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import checkEnd, { NO_RESULT, TIE, PLAYER1_WON, PLAYER2_WON } from './counter';\n\nconst N_ROWS = 6;\nconst N_COLS = 7;\nconst getInitCells = () => [...Array(N_ROWS)].map(e => new Array(N_COLS).fill('a'));\nconst INIT_CELLS = getInitCells();\n\nexport function myClientId(state = null, action) {\n  switch (action.type) {\n    case 'UPDATE_CLIENT_ID':\n      return action.clientId;\n    default:\n      return state;\n  };\n}\n\nexport function gameStarted(state = false, action) {\n  switch (action.type) {\n    case 'GAME_STARTED':\n      return true;\n    case 'SHOW_START_SCREEN':\n      return false;\n    default:\n      return state;\n  }\n}\n\nexport function gameId(state = null, action) {\n  switch (action.type) {\n    case 'SET_GAME_ID':\n      return action.gameId;\n    default:\n      return state;\n  }\n}\n\nexport function settingUpNewGame(state = false, action) {\n  switch (action.type) {\n    case 'SETUP_NEW_GAME':\n      return true;\n    case 'DONE_SETUP_GAME':\n      return false;\n    default:\n      return state;\n  }\n}\n\nexport function peerGameId(state = null, action) {\n  switch (action.type) {\n    case 'SET_PEER_GAME_ID':\n      return action.peerGameId;\n    default:\n      return state;\n  }\n}\n\nexport function networkGame(state = false, action) {\n  switch (action.type) {\n    case 'SET_NETWORK_GAME':\n      return action.isNetworkGame;\n    default:\n      return state;\n  }\n}\n\nfunction lowestEmptyCell(cells, j) {\n  var i = N_ROWS - 1;\n  while (i >= 0 && cells[i][j] !== 'a') i--;\n  return i;\n}\n\nfunction removeHoverIndicator(cells, hoverColor) {\n  for (var i = 0; i < N_ROWS; i++) for (var j = 0; j < N_COLS; j++)\n    if (cells[i][j] === hoverColor)\n      cells[i][j] = 'a';\n}\n\nfunction addPiece(state, action) {\n  removeHoverIndicator(state, action.color + 'l');\n  const i = lowestEmptyCell(state, action.j);\n  if (i < 0) {\n    console.log('Column does not have empty cell');\n    return state;\n  }\n  state[i][action.j] = action.color;\n  return state.slice();\n}\n\nexport function cells(state = INIT_CELLS, action) {\n  switch (action.type) {\n    case 'ADD_PIECE':\n      return addPiece(state, action);\n    case 'HIGHLIGHT':\n      removeHoverIndicator(state, action.color + 'l');\n      const i = lowestEmptyCell(state, action.j);\n      if (i < 0) return state;\n      state[i][action.j] = action.color + 'l';\n      return state.slice();\n    case 'GAME_STARTED':\n      return getInitCells();\n    case 'SET_CELLS':\n      return action.cells;\n    default:\n      return state;\n  }\n}\n\nexport function gameResult(state = NO_RESULT, action) {\n  switch (action.type) {\n    case 'CHECK_END':\n      return checkEnd(action.cells);\n    case 'GAME_STARTED':\n      return NO_RESULT;\n    default:\n      return state;\n  }\n}\n\nexport function player1Turn(state = true, action) {\n  switch (action.type) {\n    case 'TOGGLE_PLAYER':\n      return !state;\n    case 'GAME_STARTED':\n      return true;\n    case 'SET_PLAYER1_TURN':\n      return action.player1Turn;\n    default:\n      return state;\n  }\n}\n\nfunction updateIfMatches(message, id, field, value) {\n  if (message.id !== id) return message;\n  const ret = {...message};\n  ret[field] = value;\n  return ret;\n}\n\nfunction markMessage(messages, id, field, value) {\n  return messages.map(msg => updateIfMatches(msg, id, field, value));\n}\n\nexport function outMessages(state = [], action) {\n  switch (action.type) {\n    case 'SEND_MESSAGE':\n      return [...state, {id: action.id, msg: action.msg, data: action.data}];\n    case 'SENT_MESSAGE':\n      return markMessage(state, action.id, 'sent', true);\n    default:\n      return state;\n  }\n}\n\nexport function inMessages(state = [], action) {\n  switch (action.type) {\n    case 'RECEIVED_MESSAGE':\n      return [...state, {id: action.id, msg: action.msg, data: action.data}];\n    case 'ACK_MESSAGE':\n      return markMessage(state, action.id, 'ack', true);\n    default:\n      return state;\n  }\n}\n\nexport function hostId(state = null, action) {\n  switch (action.type) {\n    case 'SET_HOST':\n      return action.hostId;\n    default:\n      return state;\n  }\n}\n\nexport function serverConnected(state = false, action) {\n  switch (action.type) {\n    case 'RESET_SERVER_CONNECTION':\n      return false;\n    case 'SUCCESSFUL_SERVER_CONNECTION':\n      return true;\n    default:\n      return state;\n  }\n}\n\nexport function peerConnected(state = false, action) {\n  switch (action.type) {\n    case 'RESET_PEER_CONNECTION':\n      return false;\n    case 'SUCCESSFUL_PEER_CONNECTION':\n      return true;\n    default:\n      return state;\n  }\n}\n\nexport function player1Name(state = 'Player 1', action) {\n  switch (action.type) {\n    case 'SET_PLAYER1_NAME':\n      return action.name;\n    default:\n      return state;\n  }\n}\n\nexport function player2Name(state = 'Player 2', action) {\n  switch (action.type) {\n    case 'SET_PLAYER2_NAME':\n      return action.name;\n    default:\n      return state;\n  }\n}\n\nexport function duplicateClient(state = false, action) {\n  switch (action.type) {\n    case 'MARK_DUPLICATE_CLIENT':\n      return true;\n    default:\n      return state;\n  }\n}","import { combineReducers, createStore } from 'redux';\nimport * as reducers from './reducers';\n\nconst store = createStore(combineReducers(reducers), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}