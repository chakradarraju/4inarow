{"version":3,"sources":["../node_modules/peerjs/dist sync","Cell.js","Board.js","common.js","counter.js","actions.js","Game.js","Start.js","Messenger.js","GameManager.js","SyncAgent.js","App.js","serviceWorker.js","reducers.js","store.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Cell","params","gatedAttributes","enable","onMouseEnter","onHover","onClick","className","type","Board","hoverHandler","j","clickHandler","cells","map","r","i","key","c","playerColor","player1","peerConnectionString","gameId","temp","URL","window","location","hash","myClientId","toString","otherPlayer","hostId","player1Name","player2Name","player1Color","Counter","this","reset","result","count","prevColor","setWinner","color","inc","updateColor","checkEnd","N_ROWS","length","N_COLS","counter","rows","cols","boardFull","put","d","shortid","require","onExit","highlight","sendMessage","msg","data","generate","sentMessage","message","receiveMessage","ackMessage","addPiece","togglePlayer","setHostId","setGameId","setPeerGameId","peerGameId","setNetworkGame","isNetworkGame","updateClientId","clientId","resetServerConnection","successfulServerConnection","resetPeerConnection","successfulPeerConnection","setPlayer1Name","name","setPlayer2Name","startGame","exitGame","setupNewGame","doneSetupGame","setCells","setPlayer1Turn","player1Turn","markDuplicateClient","connect","a","actions","player1Local","select","gameResult","player1Reference","networkGame","player2Reference","useEffect","inMessages","ack","alert","serverConnected","peerConnected","noun","confirm","style","margin","gameStrElement","useRef","useState","youStarted","setYouStarted","peerStarted","setPeerStarted","processMessage","console","log","copyGameStr","current","document","execCommand","padding","prompt","duplicateClient","ref","readOnly","value","opts","secure","protocol","serverConnection","setServerConnection","serverConnectionError","setServerConnectionError","peerConnection","setPeerConnection","peerConnectionError","setPeerConnectionError","isClient","setIsClient","tryPeerConnect","metadata","peerId","reliable","existingId","localStorage","getItem","setItem","Peer","disconnected","setTimeout","destroyed","error","reconnect","indexOf","on","err","connection","off","outMessages","sent","send","gameHash","setGameHash","url","substr","split","settingUpNewGame","gameStarted","class","title","src","Boolean","hostname","match","getInitCells","Array","fill","INIT_CELLS","state","action","lowestEmptyCell","removeHoverIndicator","hoverColor","slice","markMessage","messages","field","ret","updateIfMatches","store","createStore","combineReducers","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.084c1f99.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 44;","import React from 'react';\nimport './Cell.css';\n\nfunction Cell(params) {\n  const gatedAttributes = params.enable ? {\n    onMouseEnter: params.onHover,\n    onClick: params.onClick\n  } : {};\n  return <div {...gatedAttributes} className={'cell ' + params.type}></div>;\n}\n\nexport default Cell;","import React, {useState} from 'react';\nimport Cell from './Cell';\n\nfunction Board(params) {\n  const hoverHandler = (j) => () => params.onHover(j)\n  const clickHandler = (j) => () => params.onClick(j);\n\n  return params.cells.map((r, i) => <div key={i}>\n    {r.map((c, j) => <Cell \n      type={c}\n      key={j}\n      enable={params.enable}\n      onClick={clickHandler(j)}\n      onHover={hoverHandler(j)} />)}\n  </div>);\n}\n\nexport default Board;","export function playerColor(player1) {\n  return player1 ? 'b' : 'c';\n};\n  \nexport function peerConnectionString(params, gameId) {\n  const temp = new URL(window.location);\n  if (!gameId) gameId = params.gameId;\n  temp.hash = params.myClientId + '/' + gameId;\n  return temp.toString();\n}\n\nexport function otherPlayer(params) {\n  return !params.hostId ? params.player2Name : params.player1Name;\n}","import {playerColor} from './common';\nexport const NO_RESULT = 0;\nexport const TIE = 1;\nexport const PLAYER1_WON = 2;\nexport const PLAYER2_WON = 3;\n\nconst player1Color = playerColor(true);\nconst emptyColor = 'a';\n\nclass Counter {\n  constructor() {\n    this.reset();\n    this.result = NO_RESULT;\n  }\n\n  reset() {\n    this.count = 0;\n    this.prevColor = emptyColor;\n  }\n\n  inc() {\n    this.count++;\n    if (this.count === 4) this.setWinner();\n  }\n\n  setWinner() {\n    this.result = this.prevColor === player1Color ? PLAYER1_WON : PLAYER2_WON;\n  }\n\n  updateColor(color) {\n    this.prevColor = color;\n    this.count = 1;\n  }\n\n  put(color) {\n    if (color === emptyColor) this.reset();\n    else if (color === this.prevColor) this.inc();\n    else this.updateColor(color);\n    return this.result;\n  }\n}\n\nfunction boardFull(cells, rows, cols) {\n  for (var i = 0; i < rows; i++) for (var j = 0; j < cols; j++) if (cells[i][j] === emptyColor) return false;\n  return true;\n}\n\nfunction checkEnd(cells) {\n  const N_ROWS = cells.length;\n  const N_COLS = cells[0].length;\n  const counter = new Counter();\n  if (boardFull(cells, N_ROWS, N_COLS)) return TIE;\n  for (var i = 0; i < N_ROWS; i++) {\n    counter.reset();\n    for (var j = 0; j < N_COLS; j++)\n      if (counter.put(cells[i][j]) !== NO_RESULT) return counter.result;\n  }\n  for (var j = 0; j < N_COLS; j++) {\n    counter.reset();\n    for (var i = 0; i < N_ROWS; i++)\n      if (counter.put(cells[i][j]) !== NO_RESULT) return counter.result;\n  }\n  for (var d = 0; d < N_ROWS + N_COLS; d++) {\n    counter.reset();\n    for (var i = 0; i < N_ROWS; i++) {\n      const j = d - i;\n      if (j < 0 || j >= N_COLS) continue;\n      if (counter.put(cells[i][j]) !== NO_RESULT) return counter.result;\n    }\n  }\n  for (var d = -N_ROWS; d < N_COLS; d++) {\n    counter.reset();\n    for (var i = 0; i < N_ROWS; i++) {\n      const j = d + i;\n      if (j < 0 || j >= N_COLS) continue;\n      if (counter.put(cells[i][j]) !== NO_RESULT) return counter.result;\n    }\n  }\n  return NO_RESULT;\n}\n\n\nexport default checkEnd;","const shortid = require('shortid');\n\nexport const onExit = () => ({type: 'EXIT_GAME'});\n\nexport const highlight = (j, color) => ({type: 'HIGHLIGHT', j, color});\n\nexport const sendMessage = (msg, data) => ({type: 'SEND_MESSAGE', msg, data, id: shortid.generate()});\n\nexport const sentMessage = message => ({type: 'SENT_MESSAGE', id: message.id});\n\nexport const receiveMessage = (msg, data) => ({type: 'RECEIVED_MESSAGE', msg, data, id: shortid.generate()})\n\nexport const ackMessage = message => ({type: 'ACK_MESSAGE', id: message.id});\n\nexport const addPiece = (j, color) => ({type: 'ADD_PIECE', j, color});\n\nexport const checkEnd = cells => ({type: 'CHECK_END', cells});\n\nexport const togglePlayer = () => ({type: 'TOGGLE_PLAYER'});\n\nexport const setHostId = hostId => ({type: 'SET_HOST', hostId});\n\nexport const setGameId = gameId => ({type: 'SET_GAME_ID', gameId});\n\nexport const setPeerGameId = peerGameId => ({type: 'SET_PEER_GAME_ID', peerGameId});\n\nexport const setNetworkGame = isNetworkGame => ({type: 'SET_NETWORK_GAME', isNetworkGame});\n\nexport const updateClientId = clientId => ({type: 'UPDATE_CLIENT_ID', clientId});\n\nexport const resetServerConnection = () => ({type: 'RESET_SERVER_CONNECTION'});\n\nexport const successfulServerConnection = () => ({type: 'SUCCESSFUL_SERVER_CONNECTION'});\n\nexport const resetPeerConnection = () => ({type: 'RESET_PEER_CONNECTION'});\n\nexport const successfulPeerConnection = () => ({type: 'SUCCESSFUL_PEER_CONNECTION'});\n\nexport const setPlayer1Name = name => ({type: 'SET_PLAYER1_NAME', name});\n\nexport const setPlayer2Name = name => ({type: 'SET_PLAYER2_NAME', name});\n\nexport const startGame = () => ({type: 'GAME_STARTED'});\n\nexport const exitGame = () => ({type: 'SHOW_START_SCREEN'});\n\nexport const setupNewGame = () => ({type: 'SETUP_NEW_GAME'});\n\nexport const doneSetupGame = () => ({type: 'DONE_SETUP_GAME'});\n\nexport const setCells = cells => ({type: 'SET_CELLS', cells});\n\nexport const setPlayer1Turn = player1Turn => ({type: 'SET_PLAYER1_TURN', player1Turn});\n\nexport const markDuplicateClient = () => ({type: 'MARK_DUPLICATE_CLIENT'});","import React, { useEffect } from 'react';\nimport Board from './Board';\nimport './Game.css';\nimport Cell from './Cell';\nimport { NO_RESULT, TIE, PLAYER1_WON, PLAYER2_WON } from './counter';\nimport {connect} from 'react-redux';\nimport {playerColor, otherPlayer} from './common';\nimport * as actions from './actions';\n\nfunction Game(params) {\n  const player1Local = !params.hostId;\n\n  useEffect(() => {\n    for (var message of params.inMessages) if (!message.ack) {\n      if (message.msg === 'select') {\n        select(message.data);\n      } else if (message.msg === 'quit-game') {\n        alert(otherPlayer(params) + ' has quit game');\n        params.setupNewGame();\n      }\n      params.ackMessage(message);\n    }\n  }, [params.inMessages]);\n\n  function onHover(j) {\n    params.highlight(j, playerColor(params.player1Turn))\n  }\n\n  function onClick(j) {\n    if (params.networkGame) params.sendMessage('select', j);\n    select(j);\n  }\n\n  function select(j) {\n    params.addPiece(j, playerColor(params.player1Turn));\n    params.checkEnd(params.cells);\n    if (params.gameResult === 0) params.togglePlayer();\n  }\n\n  function shouldEnableBoard() {\n    if (params.gameResult === NO_RESULT) {  // Game going on.\n      if (params.networkGame) {  // Make sure peer is connected, and it is your turn.\n        return params.peerConnected && (player1Local === params.player1Turn);\n      } else {  // Local game, no need to disable board.\n        return true;\n      }\n    } else {  // Game over, disable board.\n      return false;\n    }\n  }\n\n  function player1Reference() {\n    return params.networkGame && player1Local ? 'You' : params.player1Name;\n  }\n\n  function player2Reference() {\n    return params.networkGame && !player1Local ? 'You' : params.player2Name;\n  }\n\n  function possessiveForm(noun) {\n    return noun === 'You' ? 'Your' : (noun + \"'s\")\n  }\n\n  function message() {\n    if (params.gameResult === TIE) return 'Tie';\n    if (params.gameResult === PLAYER1_WON) return player1Reference() + ' won';\n    if (params.gameResult === PLAYER2_WON) return player2Reference() + ' won';\n    if (params.networkGame) {\n      if (!params.serverConnected) return \"You're not connected to server, check internet\";\n      if (!params.peerConnected) return otherPlayer(params) + ' disconnected';\n      if (params.peerConnected && params.peerGameId !== params.gameId) return otherPlayer(params) + ' left the game';\n    }\n    return possessiveForm(params.player1Turn ? player1Reference() : player2Reference()) + ' turn';\n  }\n\n  function onExit() {\n    if (window.confirm('Are you sure you want to exit game?')) {\n      if (params.networkGame) params.sendMessage('quit-game');\n      params.setupNewGame();\n    }\n  }\n\n  function setupNew() {\n    if (window.confirm('Start new game?')) params.setupNewGame();\n  }\n\n  return (<>\n    <div className=\"users\">\n      <span className=\"you\"><Cell type={playerColor(true)} />{player1Reference()}</span>\n      <span className=\"opponent\">{player2Reference()}<Cell type={playerColor(false)} /></span>\n    </div>\n    <div className=\"message\">{message()}</div>\n    {(params.gameResult === NO_RESULT || !player1Local) && <button onClick={onExit}>Exit</button>}\n    {params.gameResult !== NO_RESULT && player1Local && <button onClick={setupNew}>Start new</button>}\n    <div style={{margin: '30px'}}>\n      <Board enable={shouldEnableBoard()} cells={params.cells} onHover={onHover} onClick={onClick} />\n    </div>\n  </>);\n}\n\nexport default connect(a => a, actions)(Game);","import React, { useState, useEffect, useRef } from 'react';\nimport {connect} from 'react-redux';\nimport * as actions from './actions';\nimport {peerConnectionString} from './common';\n\nfunction Start(params) {\n  const gameStrElement = useRef();\n  const [youStarted, setYouStarted] = useState(false);\n  const [peerStarted, setPeerStarted] = useState(false);\n\n  function processMessage(message) {\n    if (message.ack) return;\n    if (message.msg === 'peer-started') {\n      console.log('Got peer started');\n      setPeerStarted(true);\n    } else if (message.msg === 'ask-peer-started') {\n      console.log('Got peer started ask');\n      if (youStarted) params.sendMessage('peer-started', true);\n    } else {\n      return;\n    }\n    params.ackMessage(message);\n  }\n\n  useEffect(() => {\n    if (!params.inMessages) return;\n    for (var i = 0; i < params.inMessages.length; i++) processMessage(params.inMessages[i]);\n  }, [params.inMessages, params.hostId]);\n\n  useEffect(() => {\n    if (params.peerConnected) {\n      params.setNetworkGame(true);\n      if (params.hostId) params.sendMessage('ask-player1-name', {});\n      else params.sendMessage('ask-player2-name', {});\n    }\n  }, [params.peerConnected]);\n\n  useEffect(() => {\n    if (params.networkGame && !params.hostId) params.sendMessage('player1-name', params.player1Name);\n  }, [params.player1Name]);\n\n  useEffect(() => {\n    if (params.networkGame && params.hostId) params.sendMessage('player2-name', params.player2Name);\n  }, [params.player2Name]);\n\n  function copyGameStr() {\n    if (!gameStrElement || !gameStrElement.current) return;\n    gameStrElement.current.select();\n    document.execCommand('copy');\n    alert('Copied, now send it to your friend');\n  }\n\n  useEffect(() => {\n    if (youStarted) params.sendMessage('peer-started', {});\n  }, [youStarted]);\n\n  useEffect(() => {\n    if (!youStarted) return;\n    if (peerStarted) params.startGame();\n    else params.sendMessage('ask-peer-started', {});\n  }, [youStarted, peerStarted]);\n\n  function hostUI() {\n    return <>\n      <div style={{margin: '20px'}}>\n        <div>Name: {params.player1Name}<button onClick={() => params.setPlayer1Name(prompt(\"Your name\"))}>Change</button></div>\n        <div>Opponent name: {params.player2Name}</div>\n      </div>\n      {!params.peerConnected && <>\n        Ask your friend to open:<br/>\n        <input ref={gameStrElement} readOnly value={peerConnectionString(params)} /><button onClick={copyGameStr}>Copy</button>\n        <div>Waiting for peer...</div>\n      </>}\n    </>\n  }\n\n  function peerUI() {\n    return <>\n      <div style={{margin: '20px'}}>\n        <div>Name: {params.player2Name}<button onClick={() => params.setPlayer2Name(prompt(\"Your name\"))}>Change</button></div>\n        <div>Opponent name: {params.player1Name}</div>\n      </div>\n      {!params.peerConnected && <>Connecting to host...</>}\n    </>\n  }\n\n  function networkGameUI() {\n    if (params.duplicateClient) return <>You've already connected from another tab, maybe close other tabs of 4-in-a-row page?</>;\n    if (!params.serverConnected) return <>Connecting to server...</>;\n    return <>\n      {!params.hostId && hostUI()}\n      {params.hostId && peerUI()}\n      {params.peerConnected && youStarted && <div>Waiting for peer to start...</div>}\n      {params.peerConnected && !youStarted && <button onClick={() => setYouStarted(true)}>Start</button>}\n    </>\n  }\n\n  function localGameUI() {\n    return <>\n      Update your names and hit start to play!<br/><br/>\n      Player 1: {params.player1Name}<button onClick={() => params.setPlayer1Name(prompt(\"Player 1 name\"))}>Change</button><br/>\n      Player 2: {params.player2Name}<button onClick={() => params.setPlayer2Name(prompt(\"Player 2 name\"))}>Change</button><br/>\n      <button style={{margin: '30px'}} onClick={params.startGame}>Start</button>\n    </>\n  }\n\n  return (<div style={{margin: '30px'}}>\n    <div style={{margin: '30px'}}>\n      <button style={{padding: params.networkGame ? '' : '5px'}} onClick={() => params.setNetworkGame(false)}>Local game</button>\n      <button style={{padding: params.networkGame ? '5px' : ''}} onClick={() => params.setNetworkGame(true)}>Network game</button>\n    </div>\n    {!params.networkGame && localGameUI()}\n    {params.networkGame && networkGameUI()}\n  </div>);\n}\n\nexport default connect(a => a, actions)(Start);","import Peer from 'peerjs';\nimport {connect} from 'react-redux';\nimport {useEffect, useState} from 'react';\nimport * as actions from './actions';\nconst shortid = require('shortid');\n\nconst opts = { secure: window.location.protocol === 'https:' };\n\nfunction Messenger(params) {\n\n  const [serverConnection, setServerConnection] = useState(null);\n  const [serverConnectionError, setServerConnectionError] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(null);\n  const [peerConnectionError, setPeerConnectionError] = useState(null);\n  const [isClient, setIsClient] = useState(true);\n\n  useEffect(() => {\n    const existingId = localStorage.getItem('client-id');\n    const id = existingId ? existingId : shortid.generate();\n    if (id !== existingId) localStorage.setItem('client-id', id);\n    params.updateClientId(id);\n  }, []);\n  \n  useEffect(() => {\n    if (params.myClientId) {\n      if (serverConnection && params.myClientId === serverConnection.id) {\n        console.log('Id did not change', params.myClientId, serverConnection.id);\n        return;\n      }\n      console.log('Connecting to server with', params.myClientId);\n      setServerConnection(new Peer(params.myClientId, opts));\n    }\n  }, [params.myClientId]);\n\n  function onServerDisconnected() {\n    setTimeout(() => {\n      if (serverConnection && serverConnection.destroyed) {\n        console.error('Why is server connection destroyed?');\n        return;\n      }\n      if (serverConnection && serverConnection.disconnected) {\n        console.log('Trying to reconnect to server...');\n        serverConnection.reconnect();\n      }\n    }, 1000);\n  }\n\n  useEffect(() => {\n    if (!serverConnection || serverConnection.disconnected) {\n      console.log('Disconnected from server');\n      params.resetServerConnection();\n      onServerDisconnected();\n    }\n    if (serverConnectionError && serverConnectionError.message.indexOf(params.myClientId) !== -1) params.markDuplicateClient();\n    if (serverConnectionError && serverConnectionError.message.indexOf('Could not connect to peer') !== -1) tryPeerConnect();\n  }, [serverConnectionError]);\n\n  useEffect(() => {\n    if (params.serverConnected) setServerConnectionError(null);\n  }, [params.serverConnected]);\n\n  useEffect(() => {\n    if (!serverConnection) {\n      console.log('Skipping event handlers on invalid serverconnection', serverConnection);\n      return;\n    }\n    console.log('Setting up server connection');\n    params.resetServerConnection();\n    serverConnection.on('open', id => {\n      console.log('Successfully connected to server');\n      params.successfulServerConnection();\n    });\n    serverConnection.on('error', err => {\n      console.error('Got server error', err);\n      setServerConnectionError(err);\n    });\n    serverConnection.on('connection', connection => {\n      setPeerConnection(connection);\n    });\n    return () => {\n      serverConnection.off('open');\n      serverConnection.off('error');\n      serverConnection.off('connection');\n    }\n  }, [serverConnection]);\n\n  useEffect(() => {\n    if (!peerConnection) {\n      console.log('no peer connection');\n      return;\n    }\n    peerConnection.on('open', () => {\n      console.log('peer connected');\n      params.successfulPeerConnection();\n    });\n    peerConnection.on('data', msg => {\n      console.log('Received message', msg);\n      params.receiveMessage(msg.msg, msg.data);\n    });\n    peerConnection.on('error', err => {\n      console.error('Peer connection error', err);\n      setPeerConnectionError(err);\n      params.resetPeerConnection();\n    });\n    return () => {\n      peerConnection.off('open');\n      peerConnection.off('data');\n      peerConnection.off('error');\n    }\n  }, [peerConnection]);\n\n  function tryPeerConnect() {\n    if (!params.hostId) {\n      console.log('hostId missing', params.hostId);\n      return;\n    }\n    setPeerConnection(serverConnection.connect(params.hostId, {metadata: {peerId: params.myClientId}, reliable: true}));\n  }\n\n  function onDisconnected() {\n    if (isClient) setTimeout(() => {\n      console.log('Trying to reconnect...', params.hostId);\n      tryPeerConnect();\n    }, 1000);\n  }\n\n  useEffect(() => {\n    if (peerConnectionError && peerConnectionError.message.indexOf('disconnected') !== -1) onDisconnected();\n  }, [peerConnectionError]);\n\n  useEffect(() => {\n    if (params.peerConnected) setPeerConnectionError(null);\n  }, [params.peerConnected]);\n\n  useEffect(() => {\n    if (!serverConnection || !params.serverConnected) {\n      console.log('Not connected to server, skipping connecting to host', params.hostId, serverConnection, params.serverConnected);\n      return;\n    }\n    if (!params.hostId) return;\n    setIsClient(true);\n    tryPeerConnect();\n  }, [serverConnection, params.serverConnected, params.hostId]);\n\n  useEffect(() => {\n    if (!params.peerConnected) {\n      console.log('Unable to send message');\n      return;\n    }\n    for (var message of params.outMessages) {\n      if (!message.sent) {\n        peerConnection.send({msg: message.msg, data: message.data});\n        params.sentMessage(message);\n      }\n    }\n  }, [params.outMessages, params.peerConnected]);\n\n  return null;\n}\n\nexport default connect(a => a, actions)(Messenger);","import { connect } from \"react-redux\";\nimport * as actions from './actions';\nimport React, { useState, useEffect } from \"react\";\nimport {peerConnectionString, otherPlayer} from './common';\nconst shortid = require('shortid');\n\nfunction GameManager(params) {\n  const [gameHash, setGameHash] = useState(null);\n\n  function parseGameId() {\n    if (gameHash.indexOf('/') === -1) return [null, gameHash];\n    return gameHash.split('/');\n  }\n\n  useEffect(() => {\n    setGameHash(window.location.hash.length > 1 ? window.location.hash.substr(1) : shortid.generate());\n  }, []);\n\n  function processMessage(message) {\n    if (message.ack) return;\n    if (message.msg === 'peer-game-id') {\n      params.setPeerGameId(message.data);\n    } else if (message.msg === 'new-game') {\n      if (window.confirm(otherPlayer(params) + ' started a new game, join?')) {\n        const url = new URL(message.data);\n        setGameHash(url.hash.substr(1));\n        params.exitGame();\n      } else {\n        params.setupNewGame();\n      }\n    } else if (message.msg === 'ask-peer-game-id') {\n      params.sendMessage('peer-game-id', params.gameId);\n    } else return;\n    params.ackMessage(message);\n  }\n\n  useEffect(() => {\n    for (var i = 0; i < params.inMessages.length; i++) processMessage(params.inMessages[i]);\n  }, [params.inMessages]);\n\n  useEffect(() => {\n    window.location.hash = gameHash;\n  }, [gameHash]);\n\n  useEffect(() => {\n    if (gameHash && gameHash.length) {\n      const [hostId, gameId] = parseGameId();\n      params.setHostId(hostId);\n      params.setGameId(gameId);  \n      if (params.networkGame) params.sendMessage('peer-game-id', gameId);\n    }\n  }, [gameHash]);\n\n  useEffect(() => {\n    if (params.settingUpNewGame) {\n      console.log('Setting up new game');\n      const gameId = shortid.generate();\n      setGameHash(gameId);\n      if (params.peerConnected) params.sendMessage('new-game', peerConnectionString(params, gameId));\n      params.doneSetupGame();\n      params.exitGame();\n    }\n  }, [params.settingUpNewGame]);\n\n  useEffect(() => {\n    if (params.gameStarted && params.networkGame) params.sendMessage('ask-peer-game-id', true);\n  }, [params.gameStarted]);\n\n  return null;\n}\n\nexport default connect(a => a, actions)(GameManager);","import { connect } from \"react-redux\";\nimport React, { useEffect } from 'react';\nimport * as actions from './actions';\n\n\nfunction SyncAgent(params) {\n\n  function processMessage(message) {\n    if (message.ack) return;\n    if (message.msg === 'ask-player1-name') {\n      params.sendMessage('player1-name', params.player1Name);\n    } else if (message.msg === 'ask-player2-name') {\n      params.sendMessage('player2-name', params.player2Name);\n    } else if (message.msg === 'player1-name') {\n      params.setPlayer1Name(message.data);\n    } else if (message.msg === 'player2-name') {\n      params.setPlayer2Name(message.data);\n    } else if (message.msg === 'ask-game-started') {\n      params.sendMessage('game-started', params.gameStarted);\n    } else if (message.msg === 'game-started') {\n      if (message.data) {\n        params.startGame();\n        params.sendMessage('ask-player1-name');\n        params.sendMessage('ask-player2-name');\n        params.sendMessage('ask-game-cells');\n        params.sendMessage('ask-player1-turn');\n        params.sendMessage('ask-peer-game-id');\n      }\n    } else if (message.msg === 'ask-game-cells') {\n      params.sendMessage('game-cells', params.cells);\n    } else if (message.msg === 'game-cells') {\n      params.setCells(message.data);\n    } else if (message.msg === 'player1-turn') {\n      params.setPlayer1Turn(message.data);\n    } else if (message.msg === 'ask-player1-turn') {\n      params.sendMessage('player1-turn', params.player1Turn);\n    } else return;\n    params.ackMessage(message);\n  }\n\n  useEffect(() => {\n    for (var i = 0; i < params.inMessages.length; i++) processMessage(params.inMessages[i]);\n  }, [params.inMessages]);\n\n  useEffect(() => {\n    if (params.peerConnected) {\n      if (!params.gameStarted) params.sendMessage('ask-game-started', {});\n    }\n  }, [params.peerConnected]);\n\n  return null;\n}\n\nexport default connect(a => a, actions)(SyncAgent);","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Game from './Game';\nimport Start from './Start';\nimport Messenger from './Messenger';\nimport {connect} from 'react-redux';\nimport GameManager from './GameManager';\nimport SyncAgent from './SyncAgent';\nimport ReactJson from 'react-json-view'\n\nfunction App(params) {\n  return (<div className=\"App\">\n    <Messenger />\n    <GameManager />\n    <SyncAgent />\n    <div className=\"title\">4 IN A ROW<div class=\"howto\" title=\"\n    Game is played by 2 players taking alternate turns,\n    in his turn player chooses a column and a piece of their color is placed in lowest free cell,\n    first player to get 4 pieces of his color in a row (horizontal, vertical or diagonal) wins.\">?</div></div>\n    <div>\n      {!params.gameStarted && <Start />}\n      {params.gameStarted && <Game />}\n    </div>\n    {localStorage.getItem('4inarow_debug') && <ReactJson src={params} />}\n  </div>);\n}\n\nexport default connect(a => a)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import checkEnd, { NO_RESULT, TIE, PLAYER1_WON, PLAYER2_WON } from './counter';\n\nconst N_ROWS = 6;\nconst N_COLS = 7;\nconst getInitCells = () => [...Array(N_ROWS)].map(e => new Array(N_COLS).fill('a'));\nconst INIT_CELLS = getInitCells();\n\nexport function myClientId(state = null, action) {\n  switch (action.type) {\n    case 'UPDATE_CLIENT_ID':\n      return action.clientId;\n    default:\n      return state;\n  };\n}\n\nexport function gameStarted(state = false, action) {\n  switch (action.type) {\n    case 'GAME_STARTED':\n      return true;\n    case 'SHOW_START_SCREEN':\n      return false;\n    default:\n      return state;\n  }\n}\n\nexport function gameId(state = null, action) {\n  switch (action.type) {\n    case 'SET_GAME_ID':\n      return action.gameId;\n    default:\n      return state;\n  }\n}\n\nexport function settingUpNewGame(state = false, action) {\n  switch (action.type) {\n    case 'SETUP_NEW_GAME':\n      return true;\n    case 'DONE_SETUP_GAME':\n      return false;\n    default:\n      return state;\n  }\n}\n\nexport function peerGameId(state = null, action) {\n  switch (action.type) {\n    case 'SET_PEER_GAME_ID':\n      return action.peerGameId;\n    default:\n      return state;\n  }\n}\n\nexport function networkGame(state = false, action) {\n  switch (action.type) {\n    case 'SET_NETWORK_GAME':\n      return action.isNetworkGame;\n    default:\n      return state;\n  }\n}\n\nfunction lowestEmptyCell(cells, j) {\n  var i = N_ROWS - 1;\n  while (i >= 0 && cells[i][j] !== 'a') i--;\n  return i;\n}\n\nfunction removeHoverIndicator(cells, hoverColor) {\n  for (var i = 0; i < N_ROWS; i++) for (var j = 0; j < N_COLS; j++)\n    if (cells[i][j] === hoverColor)\n      cells[i][j] = 'a';\n}\n\nfunction addPiece(state, action) {\n  removeHoverIndicator(state, action.color + 'l');\n  const i = lowestEmptyCell(state, action.j);\n  if (i < 0) {\n    console.log('Column does not have empty cell');\n    return state;\n  }\n  state[i][action.j] = action.color;\n  return state.slice();\n}\n\nexport function cells(state = INIT_CELLS, action) {\n  switch (action.type) {\n    case 'ADD_PIECE':\n      return addPiece(state, action);\n    case 'HIGHLIGHT':\n      removeHoverIndicator(state, action.color + 'l');\n      const i = lowestEmptyCell(state, action.j);\n      if (i < 0) return state;\n      state[i][action.j] = action.color + 'l';\n      return state.slice();\n    case 'GAME_STARTED':\n      return getInitCells();\n    case 'SET_CELLS':\n      return action.cells;\n    default:\n      return state;\n  }\n}\n\nexport function gameResult(state = NO_RESULT, action) {\n  switch (action.type) {\n    case 'CHECK_END':\n      return checkEnd(action.cells);\n    case 'GAME_STARTED':\n      return NO_RESULT;\n    default:\n      return state;\n  }\n}\n\nexport function player1Turn(state = true, action) {\n  switch (action.type) {\n    case 'TOGGLE_PLAYER':\n      return !state;\n    case 'GAME_STARTED':\n      return true;\n    case 'SET_PLAYER1_TURN':\n      return action.player1Turn;\n    default:\n      return state;\n  }\n}\n\nfunction updateIfMatches(message, id, field, value) {\n  if (message.id !== id) return message;\n  const ret = {...message};\n  ret[field] = value;\n  return ret;\n}\n\nfunction markMessage(messages, id, field, value) {\n  return messages.map(msg => updateIfMatches(msg, id, field, value));\n}\n\nexport function outMessages(state = [], action) {\n  switch (action.type) {\n    case 'SEND_MESSAGE':\n      return [...state, {id: action.id, msg: action.msg, data: action.data}];\n    case 'SENT_MESSAGE':\n      return markMessage(state, action.id, 'sent', true);\n    default:\n      return state;\n  }\n}\n\nexport function inMessages(state = [], action) {\n  switch (action.type) {\n    case 'RECEIVED_MESSAGE':\n      return [...state, {id: action.id, msg: action.msg, data: action.data}];\n    case 'ACK_MESSAGE':\n      return markMessage(state, action.id, 'ack', true);\n    default:\n      return state;\n  }\n}\n\nexport function hostId(state = null, action) {\n  switch (action.type) {\n    case 'SET_HOST':\n      return action.hostId;\n    default:\n      return state;\n  }\n}\n\nexport function serverConnected(state = false, action) {\n  switch (action.type) {\n    case 'RESET_SERVER_CONNECTION':\n      return false;\n    case 'SUCCESSFUL_SERVER_CONNECTION':\n      return true;\n    default:\n      return state;\n  }\n}\n\nexport function peerConnected(state = false, action) {\n  switch (action.type) {\n    case 'RESET_PEER_CONNECTION':\n      return false;\n    case 'SUCCESSFUL_PEER_CONNECTION':\n      return true;\n    default:\n      return state;\n  }\n}\n\nexport function player1Name(state = 'Player 1', action) {\n  switch (action.type) {\n    case 'SET_PLAYER1_NAME':\n      return action.name;\n    default:\n      return state;\n  }\n}\n\nexport function player2Name(state = 'Player 2', action) {\n  switch (action.type) {\n    case 'SET_PLAYER2_NAME':\n      return action.name;\n    default:\n      return state;\n  }\n}\n\nexport function duplicateClient(state = false, action) {\n  switch (action.type) {\n    case 'MARK_DUPLICATE_CLIENT':\n      return true;\n    default:\n      return state;\n  }\n}","import { combineReducers, createStore } from 'redux';\nimport * as reducers from './reducers';\n\nconst store = createStore(combineReducers(reducers), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}